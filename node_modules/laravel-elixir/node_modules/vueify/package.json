{
  "name": "vueify",
  "version": "5.0.4",
  "description": "Vue component transform for Browserify",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/vuejs/vueify"
  },
  "keywords": [
    "vue",
    "browserify"
  ],
  "author": {
    "name": "Evan You"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/vuejs/vueify/issues"
  },
  "scripts": {
    "test": "NODE_ENV=production mocha test/test.js --slow=1000"
  },
  "homepage": "https://github.com/vuejs/vueify",
  "dependencies": {
    "autoprefixer": "^6.0.3",
    "babel": "^5.8.23",
    "cssnano": "^3.3.2",
    "es6-promise": "^3.0.2",
    "hash-sum": "^1.0.2",
    "html-minifier": "^0.8.0",
    "lru-cache": "^2.7.0",
    "parse5": "^1.5.0",
    "postcss": "^5.0.10",
    "postcss-selector-parser": "^1.3.0",
    "through": "^2.3.6"
  },
  "peerDependencies": {
    "vueify-insert-css": "^1.0.0",
    "babel-runtime": "^5.8.25",
    "vue-hot-reload-api": "^1.2.0"
  },
  "devDependencies": {
    "coffee-script": "^1.10.0",
    "jade": "^1.11.0",
    "less": "^2.5.1",
    "mocha": "^2.3.3",
    "myth": "^1.5.0",
    "node-sass": "^3.3.3",
    "stylus": "^0.52.4"
  },
  "readme": "# vueify [![Build Status](https://circleci.com/gh/vuejs/vueify.svg?style=shield)](https://circleci.com/gh/vuejs/vueify) [![npm version](https://badge.fury.io/js/vueify.svg)](http://badge.fury.io/js/vueify)\n\n> [Browserify](http://browserify.org/) transform for [Vue.js](http://vuejs.org/) components, with scoped CSS and component hot-reloading.\n\nThis transform allows you to write your components in this format:\n\n``` html\n// app.vue\n<style>\n  .red {\n    color: #f00;\n  }\n</style>\n\n<template>\n  <h1 class=\"red\">{{msg}}</h1>\n</template>\n\n<script>\n  module.exports = {\n    data: function () {\n      return {\n        msg: 'Hello world!'\n      }\n    }\n  }\n</script>\n```\n\nYou can also mix preprocessor languages in the component file:\n\n``` vue\n// app.vue\n<style lang=\"stylus\">\n.red\n  color #f00\n</style>\n\n<template lang=\"jade\">\nh1(class=\"red\") {{msg}}\n</template>\n\n<script lang=\"coffee\">\nmodule.exports =\n  data: ->\n    msg: 'Hello world!'\n</script>\n```\n\nAnd you can import using the `src` attribute (note you'll have to save the vue file to trigger a rebuild since the imported file is not tracked by Browserify as a dependency):\n\n``` html\n<style lang=\"stylus\" src=\"style.styl\"></style>\n```\n\nUnder the hood, the transform will:\n\n- extract the styles, compile them and insert them with the `insert-css` module.\n- extract the template, compile it and add it to your exported options.\n\nYou can `require()` other stuff in the `<script>` as usual. Note that for CSS-preprocessor @imports, the path should be relative to your project root directory.\n\n## Usage\n\n``` bash\nnpm install vueify --save-dev\nbrowserify -t vueify -e src/main.js -o build/build.js\n```\n\nAnd this is all you need to do in your main entry file:\n\n``` js\n// main.js\nvar Vue = require('vue')\nvar App = require('./app.vue')\n\nnew Vue({\n  el: 'body',\n  components: {\n    app: App\n  }\n})\n```\n\nIn your HTML:\n\n``` html\n<body>\n  <app></app>\n  <script src=\"build.js\"></script>\n</body>\n```\n\nIf you are using `vueify` in Node:\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\nbrowserify('./entry.js')\n  .transform(vueify)\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\n## ES2015 by Default\n\nVueify 4.0+ automatically transforms the JavaScript in your `*.vue` components using Babel. Write ES2015 today!\n\nThe default Babel options used for Vue.js components are:\n\n``` js\n{\n  // use babel-runtime library for common helpers\n  optional: ['runtime'],\n  // use loose mode for faster builds\n  loose: 'all',\n  // disable non-standard stuff (e.g. JSX)\n  nonStandard: false\n}\n```\n\nIf you wish to mofidy this, you can add a `vue.config.js` and configure the option for `babel`:\n\n``` js\n// vue.config.js\nmodule.exports = {\n  babel: {\n    stage: 0, // use all the fancy stage 0 features!\n    optional: ['runtime'],\n    loose: 'all',\n    nonStandard: false\n  }\n}\n```\n\n## Enabling Pre-Processors\n\nYou need to install the corresponding node modules to enable the compilation. e.g. to get stylus compiled in your Vue components, do `npm install stylus --save-dev`.\n\nThese are the built-in preprocessors:\n\n- stylus\n- less\n- scss (via `node-sass`)\n- jade\n- coffee-script\n- myth\n\n## Autoprefix by Default\n\nStarting in 5.0.0, all CSS output via vueify will be autoprefixed by default. See [config section](#configuring-options) below on customizing the options.\n\n## PostCSS\n\nVueify uses PostCSS for scoped CSS rewrite and autoprefixing. You can also provide your own PostCSS plugins! See [config section](#configuring-options) below for an example.\n\n## Configuring Options\n\nCreate a `vue.config.js` file at where your build command is run (usually the root level of your project):\n\n``` js\nmodule.exports = {\n  // configure a built-in compiler\n  sass: {\n    includePaths: [...]\n  },\n  // provide your own postcss plugins\n  postcss: [...],\n  // configure autoprefixer\n  autoprefixer: {\n    browsers: ['last 2 versions']\n  },\n  // register custom compilers\n  customCompilers: {\n    // for tags with lang=\"ts\"\n    ts: function (content, cb) {\n      // compile some TypeScript...\n      cb(null, result)\n    }\n  }\n}\n```\n\nExample using custom PostCSS plugin:\n\n``` js\nvar cssnext = require('cssnext')\n\nmodule.exports = {\n  postcss: [cssnext()],\n  // disable autoprefixer since cssnext comes with it\n  autoprefixer: false\n}\n```\n\nAlternatively, if you are using `vueify` in Node and don't want to create a `vue.config.js` file:\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\n// apply custom config\nvueify.compiler.applyConfig({\n  // ...same as in vue.config.js\n})\n\nbrowserify('./entry.js')\n  .transform(vueify)\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\n### Scoped CSS\n\n> Experimental\n\nWhen a `<style>` tag has the `scoped` attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM, but doesn't require any polyfills. It is achieved by transforming the following:\n\n``` html\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\nInto the following:\n\n``` html\n<style>\n.example[_v-1] {\n  color: red;\n}\n</style>\n<template>\n  <div class=\"example\" _v-1>hi</div>\n</template>\n```\n\n#### Notes\n\n1. You can include both scoped and non-scoped styles in the same component.\n\n2. A child component's root node will be affected by both the parent's scoped CSS and the child's scoped CSS.\n\n3. Partials are not affected by scoped styles.\n\n### Hot Reload\n\n> Experimental\n\nTo enable hot component reloading, you need to install the [browserify-hmr](https://github.com/AgentME/browserify-hmr) plugin:\n\n``` bash\nnpm install browserify-hmr --save-dev\nwatchify -p browserify-hmr index.js -o bundle.js\n```\n\nA full setup example with hot reloading is available at [vuejs/vueify-example](https://github.com/vuejs/vueify-example).\n\n## Compiler API\n\nThe compiler API (originally `vue-component-compiler`) is also exposed:\n\n``` js\nvar compiler = require('vueify').compiler\n// filePath should be an absolute path, and is optional if\n// the fileContent doesn't contain src imports\ncompiler.compile(fileContent, filePath, function (err, result) {\n  // result is a common js module string\n})\n```\n\n## Syntax Highlighting\n\nAnd here's a [SublimeText package](https://github.com/vuejs/vue-syntax-highlight) for enabling language highlighting/support in these embbeded code blocks.\n\n## Example\n\nFor an example setup using most of the features mentioned above, see [vuejs/vueify-example](https://github.com/vuejs/vueify-example).\n\nIf you use Webpack, there's also [vue-loader](https://github.com/vuejs/vue-loader) that does the same thing.\n\n## Changelog\n\n### 5.0.4\n\n- Added `postcss` option for providing custom PostCSS plugins.\n\n### 5.0.0\n\n- New: CSS output is now autoprefixed by default.\n- Changed: [New config file format](#configuring-options)\n\n### 4.0.0\n\n- Support ES2015 by default.\n\n### 3.0.0\n\n- Added support for [scoped CSS](#scoped-css) and [component hot reloading](#hot-reload).\n\n### 2.0.1\n\n- Built-in lang for ES2015 has been renamed from `es6` to `es`.\n\n- `es` transforms now uses loose mode and optional runtime by default. This means in addition to installing `babel`, you should also install `babel-runtime`.\n\n- Templates and CSS are now non-minified by default. To enable minification, run the build with `NODE_ENV=production`.\n\n- Options for built-in pre-processors can now be configured in `vue.config.js`.\n\n- `vue-component-compiler` has been merged into `vueify`. It is now exposed as `require('vueify').compiler`.\n",
  "readmeFilename": "README.md",
  "_id": "vueify@5.0.4",
  "dist": {
    "shasum": "8e0582737eb007370eb98a5fdb1c0be92bdd535c"
  },
  "_from": "vueify@^5.0.1",
  "_resolved": "https://registry.npmjs.org/vueify/-/vueify-5.0.4.tgz"
}
